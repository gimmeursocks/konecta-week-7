pipeline {
    agent any

    // Define the EC2_IP parameter that this pipeline expects
    parameters {
        string(name: 'EC2_IP', defaultValue: '', description: 'IP of the EC2 instance to deploy to')
    }

    environment {
        // My private Docker Hub namespace/username
        DOCKERHUB_NAMESPACE = "gimmeursocks"
        IMAGE_NAME          = "nginx-ci"
    }

    stages {
        stage('Prepare Deployment Info') {
            steps {
                script {
                    // Format timestamp for Cairo time zone
                    def timestamp = new Date().format(
                        "yyyy-MM-dd HH:mm:ss z",
                        TimeZone.getTimeZone('Africa/Cairo')
                    )

                    // Read the template and replace placeholders
                    def htmlContent = readFile 'index.html'
                    htmlContent = htmlContent
                        .replace('JENKINS_BUILD_NUMBER', env.BUILD_NUMBER)
                        .replace('DEPLOY_TIMESTAMP', timestamp)

                    // Save to a build-specific file (or overwrite the original)
                    writeFile file: 'index.build.html', text: htmlContent
                    echo "Dynamic index.html created with build #${env.BUILD_NUMBER} at ${timestamp}"
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    def imageName = "${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    // Use the Docker Hub credential
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        // Build an image using the dynamic index.html
                        sh "docker build -t ${imageName} -f Dockerfile ."
                        // Login to Docker Hub
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                        // Push the image
                        sh "docker push ${imageName}"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    if (params.EC2_IP.isEmpty()) {
                        error("EC2_IP parameter cannot be empty. Please provide the EC2 instance IP when running the job.")
                    }

                    def imageTag = "${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    // Use the SSH private key and Docker Hub credentials
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY'),
                        usernamePassword(credentialsId: 'dockerhub-credentials',
                                        usernameVariable: 'DOCKER_USER',
                                        passwordVariable: 'DOCKER_PASS')
                        ]) {
                            // **FIX 2: Use escaped variables (\$) for secrets to prevent insecure interpolation**
                            sh """
                                ssh -i "\$SSH_KEY" -o StrictHostKeyChecking=no ec2-user@${params.EC2_IP} '
                                echo "Deploying image: ${imageTag}"
                                docker login -u "$DOCKER_USER" -p "\$DOCKER_PASS"
                                docker pull ${imageTag}
                                docker stop web || true
                                docker rm web || true
                                docker run -d --name web -p 80:80 ${imageTag}
                                '
                            """
                        }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                // Wait for the container to start
                sh 'sleep 5'
                echo "Verifying deployment at http://${params.EC2_IP}"
                sh "curl http://${params.EC2_IP}"
            }
        }
    }
}